ΕΝΤΟΛΗ ΜΕΤΑΓΛΩΤΤΙΣΗΣ ΚΑΙ ΕΚΤΕΛΕΣΗΣ

ΕΝΤΟΛΗ ΜΕΤΑΓΛΩΤΤΙΣΗΣ  :  g++ -std=c++11 Main.cpp School.cpp Floor.cpp Classroom.cpp Human.cpp Room.cpp -o exe
ΕΝΤΟΛΗ ΕΚΤΕΛΕΣΗΣ : ./exe 5 2 1 1 8


ΓΕΝΙΚΑ

Έχω φτιάξει 12 αρχεία .h για τις κλάσεις, 5 αρχεία .cpp για την υλοποίηση των συναρτήσεων κάποιων κλάσεων και 1 αρχείο .cpp για την main.
Χρησιμοποιώ include guards για να αποφύγω το πρόβλημα του double inclusion.
Πολλές εξηγήσεις για το τι είναι και γιατί χρησιμοποιήθηκαν κάποια κομμάτια κώδικα γίνονται σε σχόλια μέσα στον κώδικα οπότε δεν θα τα ξανά αναφέρω και εδώ.
Τις κλάσεις τις χώρισα σε ξεχωριστά αρχεία για να είναι πιο εύκολη η συγγραφή, ανάγνωση και συντήρηση του κώδικα
Στις κλάσεις χρησιμοποιώ private και public μέρη γιατί ο χρήστης της κλάσης θέλω να έχει πρόσβαση μόνο μέσα από τις συναρτήσεις που του προσφέρω στο public κομμάτι. Έτσι επιβάλω encapsulation στον ορισμό των τύπων μου. Στις υερκλάσεις χρησιμοποιώ protected έτσι ώστε να μπορούν να έχουν πρόσβαση οι υποκλάσεις κατευθείαν χωρίς να χρειάζεται να χρησιμοποιούν κάποια συνάρτση της υπερκλάσης.
Όσες συναρτήσεις ήταν μικρές τις όρισα μέσα στην αντίστοιχη class για να είναι inline έτσι δεν έχουν όλες οι κλάσεις αρχείο .h και .cpp αλλά μόνο .h.


MAIN

Αρχικά αποθηκεύω τα δεδομένα που πήρα από τη εντολή εκτέλεσης σε αντίστοιχες μεταβλητές μετατρέποντας τα σε ακέραιους με την stoi().
Έπειτα δημιουργούμε ένα άδειο σχολειό χρησιμοποιώντας τα δεδομένα που πήραμε από τη εντολή κλήσης.
Μετά φτιάχνουμε τόσους μαθητές όσους χρειάζεται για να γεμίσουν όλες οι τάξεις με τυχαία ονόματα και τους αναθέτουμε όροφο και αντίστοιχη τάξη με τη σειρά δηλαδή ο πρώτος θα πάει στον πρώτο όροφο πρώτη τάξη όπως και όλοι οι επόμενοι μέχρι να γεμίσει αυτή η τάξη και μετά θα πάμε στο πρώτο όροφο δεύτερη τάξη κτλπ. Για τις πρώτες 3 τάξεις κάθε ορόφου βάζουμε Junior μαθητές ενώ για τις επόμενες 3 βάζουμε Senior μαθητές.
Στη συνέχεια φτιάχνουμε τους καθηγητές με τυχαία ονόματα αλλά τους αναθέτουμε με την σειρά σε όροφο και τάξεις αντίστοιχα δηλαδή ο πρώτος καθηγητής που δημιουργούμε θα πάει στον πρώτο όροφο πρώτη τάξη ο δεύτερος θα πάει στον πρώτο όροφο δεύτερη τάξη κτλπ.
Μετά μέσα σε μια for καλώ την enter του school περνώντας για ορίσμα έναν τυχαίο μαθητή κάθε φορά για όλους τους μαθητές που έχουμε. Στην συνέχεια κάνω το ίδιο για τους καθηγητές που έχουμε.
Έπειτα λειτουργεί το σχολικό κτήριο για Ν ώρες καλώντας της συνάρτηση operate του σχολείου και δίνοντας της ως όρισμα το Ν και τέλος εκτυπώνουμε το σχολικό κτήριο χρησιμοποιόντας τη συνάρτηση print του σχολείου.


SCHOOL

Στην κλάση του σχολείου έχω αναπαραστήσει τους ορόφους με έναν πινάκα δεικτών 3 θέσεων σε αντικείμενα τύπου Floor (είναι η κλάση για τον όροφο), την άυλη με ένα αντικείμενο της κλάσης Yard και τις σκάλες με ένα αντικείμενο της κλάσης Staircase.
Ο constructor για κάθε θέση του πίνακα με τους ορόφους δημιουργεί ένα αντικείμενο της κλάσης Floor και δίνει τον αριθμό του ορόφου και αρχικοποιεί τον μέγιστο αριθμό μαθητών της κάθε τάξης καλώντας τον constructor του ορόφου και βάζει τον δείκτη αυτής της θέσης του πίνακα να δείχνει σε αυτό τον αντικείμενο.
Ο destructor φροντίζει για την αποδέσμευση του χώρου του πίνακα με τους ορόφους.


YARD

Η κλάση της άυλης είναι υποκλάση της κλάσης Room στην οποία έχουν ξανά οριστεί οι συναρτήσεις enter και exit της κλάσης Room.


STAIRCASE

H κλάση του κλιμακοστασίου είναι υποκλάση της κλάσης Room στην οποία έχουν ξανά οριστεί οι συναρτήσεις enter και exit της κλάσης Room.


FLOOR

Στην κλάση του ορόφου έχω αναπαραστήσει τις τάξεις με έναν πινάκα δεικτών 6 θέσεων σε αντικείμενα τύπου Classroom (είναι η κλάση για την τάξη) και τον διάδρομο με ένα αντικείμενο της κλάσης Corridor.
Ο constructor αρχικοποιει την μεταβλητή που κρατάει τον αριθμό του ορόφου με την αντίστοιχη τιμή που του δόθηκε. Επίσης στον πίνακα των τάξεων αρχικοποιεί κάθε θέση δημιουργώντας ένα αντικείμενο τύπου Classroom και δίνει τον αριθμό της τάξης και την τιμή για τον μέγιστο αριθμό μαθητών μέσα στην τάξη και κάνει τον δείκτη να δείχνει στο αντικείμενο αυτό.
Ο destructor φροντίζει για την σωστή αποδέσμευση της μνήμης που δεσμεύθηκε για τις τάξεις.


CORRIDOR

Η κλάση του διαδρόμου είναι υποκλάση της κλάσης Room στην οποία έχουν ξανά οριστεί οι συναρτήσεις enter και exit της κλάσης Room.


CLASSROOM

Στην κλάση της τάξης έχω βάλει έναν δείκτη σε αντικείμενο τύπου teacher που θα δείχνει στο δάσκαλο της τάξης, έναν δείκτη σε δείκτη τύπου Student που θα τον χρησιμοποιήσω για να κρατάω τους μαθητές που βρίσκονται μέσα στην τάξη, μια μεταβλητή για να κρατάω τον μέγιστο αριθμό μαθητών που μπορεί να δεχτεί η τάξη και μια άλλη με τον αριθμό της τάξης.
Ο constructor αρχικοποιεί την μεταβλητή που κρατάει τον μέγιστο αριθμό μαθητών στην τάξη με την αντίστοιχη τιμή που δώθηκε, την μεταβλητή που κρατάει τον αριθμό της τάξης με την αντίστοιχη τμή που δώθηκε και τον δείκτη που θα δείχνει τον δάσκαλο με null. Επίσης βάζει τον δείκτη student να δείχνει σε έναν πίνακα από δείκτες σε αντικείμενα τύπου Student και αρχικοποιει τον κάθε δείκτη του πινάκα με NULL.
Ο destructor αποδεσμεύει την μνήμη που δεσμεύθηκε για τους μαθητές και τον δάσκαλο.


SENIOR

Η κλάση αυτή είναι υποκλάση της κλάσης Student και ο constructor δέχεται το όνομα του μαθητή, τον αριθμό του ορόφου που βρίσκεται η τάξη του, τον αριθμό της τάξης του καθώς και τον αριθμό αύξησης της κούρασης του και τα περνάει στον constructor της κλάσης Student χρησιμοποιόντας initializer list.
Παρόλο που η συνάρτηση print της κλάσης Student κάνει ακριβώς αυτό που θέλουμε να κάνει για τον Senior την ξανά ορίζουμε γιατί η συνάρτηση print της Student ειναι pure virtual (για να είναι abstract κλάση γιατί δεν θέλουμε να μπορεί ο χρήστης να ορίσει αντικείμενα της κλασης αυτής), έτσι αν δεν την ξανά ορίσουμε θα γίνει και η κλάση Senior abstract κλάση, κάτι που δεν το θέλουμε.


JUNIOR

Η κλάση αυτή είναι υποκλάση της κλάσης Student και ο constructor δέχεται το όνομα του μαθητή, τον αριθμό του ορόφου που βρίσκεται η τάξη του, τον αριθμό της τάξης του καθώς και τον αριθμό αύξησης της κούρασης του και τα περνάει στον constructor της κλάσης Student χρησιμοποιόντας initializer list.
Παρόλο που η συνάρτηση print της κλάσης Student κάνει ακριβώς αυτό που θέλουμε να κάνει για τον Junior την ξανά ορίζουμε γιατί η συνάρτηση print της Student ειναι pure virtual (για να είναι abstract κλάση γιατί δεν θέλουμε να μπορεί ο χρήστης να ορίσει αντικείμενα της κλασης αυτής), έτσι αν δεν την ξανά ορίσουμε θα γίνει και η κλάση Junior abstract κλάση, κάτι που δεν το θέλουμε.


STUDENT 

Η κλάση αυτή είναι υποκλάση της κλάσης Human και ο constructor δέχεται το όνομα του μαθητή, τον αριθμό του ορόφου που βρίσκεται η τάξη του, τον αριθμό της τάξης του καθώς και τον αριθμό αύξησης της κούρασης του και τα περνάει στον constructor της κλάσης Human χρησιμοποιόντας initializer list.
Την κλάση αυτή την έχουμε κάνει abstract γιατί δεν θέλουμε ο χρήστης να μπορεί να δημιουργήσει αντικείμενα της κλάσης αυτής, αυτό γίνεται γιατί δεν έχουμε ξανά ορίσει την συνάρτηση print της κλάσης Human η οποία είναι pure virtual.


TEACHER

Η κλάση αυτή είναι υποκλάση της κλάσης Human και ο constructor δέχεται το όνομα του δασκάλου, τον αριθμό του ορόφου που βρίσκεται η τάξη του, τον αριθμό της τάξης του καθώς και τον αριθμό αύξησης της κούρασης του και τα περνάει στον constructor της κλάσης Human χρησιμοποιόντας initializer list.


ROOM

Η κλάση αυτή έχει έναν δείκτη σε student (private) και ο constructor απλός αρχικοποιεί τον δείκτη αυτόν με NULL, επίσης έχει μία συνάρτηση enter και μία συνάρτηση exit οι οποίες είναι pure virtual και οι δύο γιατί ξανά ορίζονται σε όλες τις υποκλάσεις ενώ ταυτόχρονα κάνουν την κλάση ROOM abstract γιατί δεν θέλουμε να μπόρει ο χρήστης να δημιουργεί αντικείμενα της κλάσης αυτής.


HUMAN

Η κλάση αυτή έχει ένα string για το όνομα, 4 ακέραιους για τον αριθμό του ορόφου, της τάξης, το πόσο κουρασμένος είναι και την τιμή αύξησης της κούρασης του, καθώς και μια μεταβλητή bool για την αναπαράσταση του αν έχει μπει στην τάξη ή όχι.
Ο constructor δέχεται το όνομα, τον αριθμό του ορόφου, της τάξης και την τιμή αύξησης της κούρασης του και αρχικοποιέι με αυτά τις αντίστοιχες μεταβλητές καθώς και την μεταβλητή για το πόσο κουρασμένος είναι με 0 και την μεταβλήτη για το αν είναι μέσα στην τάξη ή όχι με false.
Η συνάρτηση print είναι pure virtual γιατί ξανά ορίζεται στην υποκλάση Teacher ενώ στην υποκλάση Student που θέλουμε να είναι abstract δεν ξανά ορίζεται, επίσης κάνει την κλάση Human abstract κάτι το οποίο το θέλουμε για να μην μπορεί ο χρήστης να δημιουργεί αντικείμενα της κλάσης αυτής.


Στην κλάση Room το student είναι private γιατί η δουλεία που κάνουν οι enter και exit είναι κοινή για όλες τις υποκλάσεις και δεν χρειάζεται να έχουν πρόσβαση οι υποκλάσεις στον student για κάποιο άλλο λόγο. Αν ήθελα θα μπορούσα να έβαζα τον student protected αντί για private και να είχαν πρόσβαση και οι υποκλάσεις αλλά στη συγκεκριμένη περίπτωση δεν θεωρώ ότι βοηθάει σε κάτι.


Η increaseTiredness θα μπορούσε να μην υπάρχει και να γίνεται η δουλειά που κάνει στον Student και Teacher αντίστοιχα αφού έχουν πρόσβαση σε ότι χρειάζεται αλλά αφού είναι το ίδιο και για τους δύο την έβαλα στον Human. Αντίστοιχα για τις συναρτήσεις getName, getClassroomNumber, getFloorNumber, setIsInside θα μπορούσα να τις έχω στους Student και Τeacher (μιας και έχουν πρόσβαση σε ότι χρειάζονται) αλλά αφου είναι κοινές και για τις δύο κλάσεις τις έβαλα στην κλάση Human.


Θα μπορούσα τις enter, place, operate και print που τις έχουν κοινές σαν λειτουργίες οι κλάσεις Classroom, Floor και School να τις βάλω σε μια άλλη κλάση ως pure virtual και να την κλιρονομούν αλλά δεν έχουν τίποτα άλλο κοινό οπότε δεν θεωρώ οτι θα προσέφερε κάτι ουσιαστικό για αυτό και δεν το έκανα.